# -*- coding:utf-8 -*-

from fastapi import APIRouter, Depends, UploadFile, Body, Path
from fastapi.responses import StreamingResponse, JSONResponse
from app.common.response import SuccessResponse, StreamResponse
from app.core.dependencies import AuthPermission
from app.core.router_class import OperationLogRoute
from app.api.v1.module_system.auth.schema import AuthSchema
from app.core.base_params import PaginationQueryParam
from app.utils.common_util import bytes2file_response
from app.core.logger import logger
from app.core.base_schema import BatchSetAvailable

from .service import {{ table_name|snake_to_pascal_case }}Service
from .schema import {{ table_name|snake_to_pascal_case }}CreateSchema, {{ table_name|snake_to_pascal_case }}UpdateSchema
from .param import {{ table_name|snake_to_pascal_case }}QueryParam

{{ table_name|snake_to_pascal_case }}Router = APIRouter(route_class=OperationLogRoute, prefix='/{{ module_name }}/{{ business_name }}', tags=["{{ function_name }}模块"]) 

@{{ table_name|snake_to_pascal_case }}Router.get("/detail/{id}", summary="获取{{ function_name }}详情", description="获取{{ function_name }}详情")
async def get_obj_detail_controller(
    id: int = Path(..., description="ID"),
    auth: AuthSchema = Depends(AuthPermission(["{{ permission_prefix }}:query"]))
) -> JSONResponse:
    """获取{{ function_name }}详情接口"""
    result_dict = await {{ table_name|snake_to_pascal_case }}Service.detail_service(auth=auth, id=id)
    logger.info(f"获取{{ function_name }}详情成功 {id}")
    return SuccessResponse(data=result_dict, msg="获取{{ function_name }}详情成功")

@{{ table_name|snake_to_pascal_case }}Router.get("/list", summary="查询{{ function_name }}列表", description="查询{{ function_name }}列表")
async def get_obj_list_controller(
    page: PaginationQueryParam = Depends(),
    search: {{ table_name|snake_to_pascal_case }}QueryParam = Depends(),
    auth: AuthSchema = Depends(AuthPermission(["{{ permission_prefix }}:query"]))
) -> JSONResponse:
    """查询{{ function_name }}列表接口（数据库分页）"""
    result_dict = await {{ table_name|snake_to_pascal_case }}Service.page_service(
        auth=auth,
        page_no=page.page_no if page.page_no is not None else 1,
        page_size=page.page_size if page.page_size is not None else 10,
        search=search,
        order_by=page.order_by
    )
    logger.info("查询{{ function_name }}列表成功")
    return SuccessResponse(data=result_dict, msg="查询{{ function_name }}列表成功")

@{{ table_name|snake_to_pascal_case }}Router.post("/create", summary="创建{{ function_name }}", description="创建{{ function_name }}")
async def create_obj_controller(
    data: {{ table_name|snake_to_pascal_case }}CreateSchema,
    auth: AuthSchema = Depends(AuthPermission(["{{ permission_prefix }}:create"]))
) -> JSONResponse:
    """创建{{ function_name }}接口"""
    result_dict = await {{ table_name|snake_to_pascal_case }}Service.create_service(auth=auth, data=data)
    logger.info("创建{{ function_name }}成功")
    return SuccessResponse(data=result_dict, msg="创建{{ function_name }}成功")

@{{ table_name|snake_to_pascal_case }}Router.put("/update/{id}", summary="修改{{ function_name }}", description="修改{{ function_name }}")
async def update_obj_controller(
    data: {{ table_name|snake_to_pascal_case }}UpdateSchema,
    id: int = Path(..., description="ID"),
    auth: AuthSchema = Depends(AuthPermission(["{{ permission_prefix }}:update"]))
) -> JSONResponse:
    """修改{{ function_name }}接口"""
    result_dict = await {{ table_name|snake_to_pascal_case }}Service.update_service(auth=auth, id=id, data=data)
    logger.info("修改{{ function_name }}成功")
    return SuccessResponse(data=result_dict, msg="修改{{ function_name }}成功")

@{{ table_name|snake_to_pascal_case }}Router.delete("/delete", summary="删除{{ function_name }}", description="删除{{ function_name }}")
async def delete_obj_controller(
    ids: list[int] = Body(..., description="ID列表"),
    auth: AuthSchema = Depends(AuthPermission(["{{ permission_prefix }}:delete"]))
) -> JSONResponse:
    """删除{{ function_name }}接口"""
    await {{ table_name|snake_to_pascal_case }}Service.delete_service(auth=auth, ids=ids)
    logger.info(f"删除{{ function_name }}成功: {ids}")
    return SuccessResponse(msg="删除{{ function_name }}成功")

@{{ table_name|snake_to_pascal_case }}Router.patch("/available/setting", summary="批量修改{{ function_name }}状态", description="批量修改{{ function_name }}状态")
async def batch_set_available_obj_controller(
    data: BatchSetAvailable,
    auth: AuthSchema = Depends(AuthPermission(["{{ permission_prefix }}:patch"]))
) -> JSONResponse:
    """批量修改{{ function_name }}状态接口"""
    await {{ table_name|snake_to_pascal_case }}Service.set_available_service(auth=auth, data=data)
    logger.info(f"批量修改{{ function_name }}状态成功: {data.ids}")
    return SuccessResponse(msg="批量修改{{ function_name }}状态成功")

@{{ table_name|snake_to_pascal_case }}Router.post('/export', summary="导出{{ function_name }}", description="导出{{ function_name }}")
async def export_obj_list_controller(
    search: {{ table_name|snake_to_pascal_case }}QueryParam = Depends(),
    auth: AuthSchema = Depends(AuthPermission(["{{ permission_prefix }}:export"]))
) -> StreamingResponse:
    """导出{{ function_name }}接口"""
    result_dict_list = await {{ table_name|snake_to_pascal_case }}Service.list_service(search=search, auth=auth)
    export_result = await {{ table_name|snake_to_pascal_case }}Service.batch_export_service(obj_list=result_dict_list)
    logger.info('导出{{ function_name }}成功')

    return StreamResponse(
        data=bytes2file_response(export_result),
        media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        headers={
            'Content-Disposition': 'attachment; filename={{ table_name }}.xlsx'
        }
    )

@{{ table_name|snake_to_pascal_case }}Router.post('/import', summary="导入{{ function_name }}", description="导入{{ function_name }}")
async def import_obj_list_controller(
    file: UploadFile,
    auth: AuthSchema = Depends(AuthPermission(["{{ permission_prefix }}:import"]))
) -> JSONResponse:
    """导入{{ function_name }}接口"""
    batch_import_result = await {{ table_name|snake_to_pascal_case }}Service.batch_import_service(file=file, auth=auth, update_support=True)
    logger.info("导入{{ function_name }}成功")
    
    return SuccessResponse(data=batch_import_result, msg="导入{{ function_name }}成功")

@{{ table_name|snake_to_pascal_case }}Router.post('/download/template', summary="获取{{ function_name }}导入模板", description="获取{{ function_name }}导入模板", dependencies=[Depends(AuthPermission(["{{ permission_prefix }}:download"]))])
async def export_obj_template_controller() -> StreamingResponse:
    """获取{{ function_name }}导入模板接口"""
    example_import_template_result = await {{ table_name|snake_to_pascal_case }}Service.import_template_download_service()
    logger.info('获取{{ function_name }}导入模板成功')

    return StreamResponse(
        data=bytes2file_response(example_import_template_result),
        media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        headers={
            'Content-Disposition': 'attachment; filename={{ table_name }}_template.xlsx'
        }
    )