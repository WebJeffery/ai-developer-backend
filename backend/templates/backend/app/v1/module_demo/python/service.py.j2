# -*- coding:utf-8 -*-

import io
from typing import Any, List, Dict, Optional
from fastapi import UploadFile
import pandas as pd

from app.core.base_schema import BatchSetAvailable
from app.core.exceptions import CustomException
from app.utils.excel_util import ExcelUtil
from app.core.logger import logger
from app.api.v1.module_system.auth.schema import AuthSchema
from .schema import {{ table_name|snake_to_pascal_case }}CreateSchema, {{ table_name|snake_to_pascal_case }}UpdateSchema, {{ table_name|snake_to_pascal_case }}OutSchema
from .param import {{ table_name|snake_to_pascal_case }}QueryParam
from .crud import {{ table_name|snake_to_pascal_case }}CRUD


class {{ table_name|snake_to_pascal_case }}Service:
    """
    {{ function_name }}服务层
    """
    
    @classmethod
    async def detail_service(cls, auth: AuthSchema, id: int) -> Dict:
        """详情"""
        obj = await {{ table_name|snake_to_pascal_case }}CRUD(auth).get_by_id_crud(id=id)
        if not obj:
            raise CustomException(msg="该数据不存在")
        return {{ table_name|snake_to_pascal_case }}OutSchema.model_validate(obj).model_dump()
    
    @classmethod
    async def list_service(cls, auth: AuthSchema, search: Optional[{{ table_name|snake_to_pascal_case }}QueryParam] = None, order_by: Optional[List[Dict[str, str]]] = None) -> List[Dict]:
        """列表查询"""
        search_dict = search.__dict__ if search else None
        obj_list = await {{ table_name|snake_to_pascal_case }}CRUD(auth).list_crud(search=search_dict, order_by=order_by)
        return [{{ table_name|snake_to_pascal_case }}OutSchema.model_validate(obj).model_dump() for obj in obj_list]

    @classmethod
    async def page_service(cls, auth: AuthSchema, page_no: int, page_size: int, search: Optional[{{ table_name|snake_to_pascal_case }}QueryParam] = None, order_by: Optional[List[Dict[str, str]]] = None) -> Dict:
        """分页查询（数据库分页）"""
        search_dict = search.__dict__ if search else {}
        order_by_list = order_by or [{'id': 'asc'}]
        offset = (page_no - 1) * page_size
        result = await {{ table_name|snake_to_pascal_case }}CRUD(auth).page_crud(
            offset=offset,
            limit=page_size,
            order_by=order_by_list,
            search=search_dict
        )
        return result
    
    @classmethod
    async def create_service(cls, auth: AuthSchema, data: {{ table_name|snake_to_pascal_case }}CreateSchema) -> Dict:
        """创建"""
        obj = await {{ table_name|snake_to_pascal_case }}CRUD(auth).create_crud(data=data)
        return {{ table_name|snake_to_pascal_case }}OutSchema.model_validate(obj).model_dump()
    
    @classmethod
    async def update_service(cls, auth: AuthSchema, id: int, data: {{ table_name|snake_to_pascal_case }}UpdateSchema) -> Dict:
        """更新"""
        obj = await {{ table_name|snake_to_pascal_case }}CRUD(auth).get_by_id_crud(id=id)
        if not obj:
            raise CustomException(msg='更新失败，该数据不存在')
        obj = await {{ table_name|snake_to_pascal_case }}CRUD(auth).update_crud(id=id, data=data)
        return {{ table_name|snake_to_pascal_case }}OutSchema.model_validate(obj).model_dump()
    
    @classmethod
    async def delete_service(cls, auth: AuthSchema, ids: List[int]) -> None:
        """删除"""
        if len(ids) < 1:
            raise CustomException(msg='删除失败，删除对象不能为空')
        for id in ids:
            obj = await {{ table_name|snake_to_pascal_case }}CRUD(auth).get_by_id_crud(id=id)
            if not obj:
                raise CustomException(msg=f'删除失败，ID为{id}的数据不存在')
        await {{ table_name|snake_to_pascal_case }}CRUD(auth).delete_crud(ids=ids)
    
    @classmethod
    async def set_available_service(cls, auth: AuthSchema, data: BatchSetAvailable) -> None:
        """批量设置状态"""
        await {{ table_name|snake_to_pascal_case }}CRUD(auth).set_available_crud(ids=data.ids, status=data.status)
    
    @classmethod
    async def batch_export_service(cls, obj_list: List[Dict[str, Any]]) -> bytes:
        """批量导出"""
        mapping_dict = {
            'id': '编号',
            {% for column in columns %}
            '{{ column.column_name }}': '{{ column.column_comment }}',
            {% endfor %}
            'created_at': '创建时间',
            'updated_at': '更新时间',
            'creator': '创建者',
        }

        data = obj_list.copy()
        for item in data:
            # 状态转换
            if 'status' in item:
                item['status'] = '正常' if item.get('status') else '停用'
            # 创建者转换
            creator_info = item.get('creator')
            if isinstance(creator_info, dict):
                item['creator'] = creator_info.get('name', '未知')
            elif creator_info is None:
                item['creator'] = '未知'

        return ExcelUtil.export_list2excel(list_data=data, mapping_dict=mapping_dict)

    @classmethod
    async def batch_import_service(cls, auth: AuthSchema, file: UploadFile, update_support: bool = False) -> str:
        """批量导入"""
        header_dict = {
            {% for column in columns %}
            '{{ column.column_comment }}': '{{ column.column_name }}',
            {% endfor %}
        }

        try:
            contents = await file.read()
            df = pd.read_excel(io.BytesIO(contents))
            await file.close()
            
            if df.empty:
                raise CustomException(msg="导入文件为空")
            
            missing_headers = [header for header in header_dict.keys() if header not in df.columns]
            if missing_headers:
                raise CustomException(msg=f"导入文件缺少必要的列: {', '.join(missing_headers)}")
            
            df.rename(columns=header_dict, inplace=True)
            
            error_msgs = []
            success_count = 0
            count = 0
            
            for index, row in df.iterrows():
                count += 1
                try:
                    data = {
                        {% for column in columns %}
                        "{{ column.column_name }}": row['{{ column.column_name }}'],
                        {% endfor %}
                    }
                    # 使用CreateSchema做校验后入库
                    create_schema = {{ table_name|snake_to_pascal_case }}CreateSchema.model_validate(data)
                    await {{ table_name|snake_to_pascal_case }}CRUD(auth).create_crud(data=create_schema)
                    success_count += 1
                except Exception as e:
                    error_msgs.append(f"第{count}行: {str(e)}")
                    continue

            result = f"成功导入 {success_count} 条数据"
            if error_msgs:
                result += "\n错误信息:\n" + "\n".join(error_msgs)
            return result
            
        except Exception as e:
            logger.error(f"批量导入失败: {str(e)}")
            raise CustomException(msg=f"导入失败: {str(e)}")

    @classmethod
    async def import_template_download_service(cls) -> bytes:
        """下载导入模板"""
        header_list = [
            {% for column in columns %}
            '{{ column.column_comment }}',
            {% endfor %}
        ]
        return ExcelUtil.get_excel_template(
            header_list=header_list,
            selector_header_list=[],
            option_list=[]
        )