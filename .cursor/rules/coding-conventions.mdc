---
alwaysApply: true
description: 通用编码规范和约定
---

# 编码规范和约定

## 命名规范

### 后端 Python

- **文件**: 使用小写字母和下划线: `user_service.py`
- **类名**: 使用 PascalCase: `UserModel`, `UserService`
- **函数名**: 使用小写字母和下划线: `get_user_info`
- **变量名**: 使用小写字母和下划线: `user_name`
- **常量**: 使用大写字母和下划线: `MAX_SIZE`
- **私有成员**: 使用双下划线前缀: `__private_method`

### 前端 TypeScript/Vue

- **文件**: 
  - 组件: PascalCase `UserList.vue`
  - 工具/API: camelCase `userService.ts`
- **组件名**: 使用 PascalCase: `UserList`, `UserForm`
- **函数名**: 使用 camelCase: `getUserInfo`, `handleSubmit`
- **变量名**: 使用 camelCase: `userName`, `isLoading`
- **常量**: 使用 UPPER_SNAKE_CASE: `MAX_SIZE`, `API_BASE_URL`
- **接口**: 使用 PascalCase: `UserInfo`, `ApiResponse<T>`

## 注释规范

### Python 文档字符串

```python
def example_function(param1: str, param2: int) -> dict:
    """
    函数功能简要说明
    
    详细描述函数的作用和用途
    
    参数:
    - param1 (str): 参数1的说明
    - param2 (int): 参数2的说明
    
    返回:
    - dict: 返回值的结构和内容
    
    异常:
    - CustomException: 可能的异常情况说明
    
    示例:
        >>> result = example_function("test", 123)
        >>> print(result)
    """
    pass
```

### TypeScript 注释

```typescript
/**
 * 获取用户信息
 * @param userId - 用户ID
 * @returns 用户信息对象
 * @throws 当用户不存在时抛出异常
 */
async function getUserInfo(userId: number): Promise<User> {
  // 实现逻辑
}
```

### 行内注释

```python
# 这是一个重要的业务逻辑注释
result = calculate_total(price, quantity)
```

```typescript
// 这是一个临时解决方案，后续需要重构
const tempData = processData(rawData)
```

## Git 提交规范

使用约定式提交规范：

```
<type>(<scope>): <subject>

<body>

<footer>
```

类型说明：
- `feat`: 新功能
- `fix`: 修复问题
- `docs`: 文档更新
- `style`: 代码格式调整
- `refactor`: 重构
- `perf`: 性能优化
- `test`: 测试相关
- `chore`: 构建/工具链
- `revert`: 回滚提交

示例：
```
feat(backend): 添加用户管理接口
fix(frontend): 修复列表页分页问题
docs(readme): 更新安装说明
```

## 代码格式化

### Python

- 使用 4 个空格缩进
- 每行最多 100 字符
- 使用 PEP 8 风格指南

### TypeScript/Vue

- 使用 2 个空格缩进
- 每行最多 100 字符
- 使用 ESLint 规则

## 导入顺序

### Python

```python
# 1. 标准库
import os
from typing import Optional

# 2. 第三方库
from fastapi import APIRouter
from pydantic import BaseModel

# 3. 本地应用/库
from app.core.base_crud import CRUDBase
from app.api.v1.module_system.user.model import UserModel
```

### TypeScript

```typescript
// 1. Vue 和相关
import { ref, reactive } from 'vue'
import { defineStore } from 'pinia'

// 2. 第三方库
import axios from 'axios'
import { ElMessage } from 'element-plus'

// 3. 本地模块
import { getUserList } from '@/api/user'
import { useUserStore } from '@/store/modules/user'
```

## 错误处理

### Python

```python
try:
    result = await some_operation()
    return result
except DatabaseError as e:
    logger.error(f"数据库操作失败: {str(e)}")
    raise CustomException(msg="操作失败，请稍后重试")
except Exception as e:
    logger.error(f"未知错误: {str(e)}")
    raise CustomException(msg="系统错误")
```

### TypeScript

```typescript
try {
  const data = await fetchData()
  return data
} catch (error) {
  console.error('请求失败:', error)
  ElMessage.error('操作失败，请稍后重试')
  throw error
}
```

## 响应式数据

### Python Pydantic

```python
class ResponseSchema(BaseModel):
    """统一响应模型"""
    code: int = Field(description="响应码，200表示成功")
    msg: str = Field(description="响应消息")
    data: Optional[Any] = Field(default=None, description="响应数据")
```

### TypeScript

```typescript
interface ApiResponse<T> {
  code: number
  msg: string
  data: T
}

interface PaginationResponse<T> {
  items: T[]
  total: number
  page_no: number
  page_size: number
}
```

## 数据验证

### Python

```python
from pydantic import BaseModel, Field, validator

class UserCreateSchema(BaseModel):
    name: str = Field(..., min_length=1, max_length=50, description="用户名")
    email: str = Field(..., regex="^[\\w\\.-]+@[\\w\\.-]+\\.[a-z]{2,}$", description="邮箱")
    
    @validator('name')
    def validate_name(cls, v):
        if not v.strip():
            raise ValueError('用户名不能为空')
        return v
```

### TypeScript

```typescript
interface CreateUserDto {
  name: string
  email: string
}

// 使用验证库或手动验证
const validateUser = (user: CreateUserDto): boolean => {
  if (!user.name.trim()) {
    ElMessage.error('用户名不能为空')
    return false
  }
  return true
}
```