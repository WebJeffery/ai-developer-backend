---
alwaysApply: true
---

# 项目结构指南

本项目是一个全栈应用，包含后端、前端和移动端。

## 项目架构

### 目录结构

```
ai-developer-backend/
├── backend/          # Python FastAPI 后端
├── frontend/         # Vue3 管理系统前端  
├── fastapp/          # uni-app 移动端前端
├── fastdocs/         # 文档站点
├── devops/           # DevOps 配置（Docker、Nginx）
└── docker-compose.yaml
```

### 后端架构（Backend）

采用 MVC 分层架构模式：

```
backend/app/
├── api/v1/                    # API 接口层（Controller）
│   └── module_*/             # 业务模块
│       ├── controller.py    # 控制器 - 处理HTTP请求
│       ├── service.py        # 服务层 - 业务逻辑
│       ├── crud.py           # 数据访问层 - 数据库操作
│       ├── model.py          # ORM 模型 - 数据模型定义
│       ├── schema.py         # Pydantic 模型 - 数据验证
│       └── param.py          # 参数模型 - 查询参数
├── core/                      # 核心模块
│   ├── base_crud.py         # 基础 CRUD 类
│   ├── base_model.py        # 基础模型类
│   ├── base_schema.py       # 基础 Schema 类
│   ├── database.py          # 数据库配置
│   ├── security.py          # 安全认证
│   └── router_class.py      # 路由装饰器
├── common/                    # 公共组件
├── config/                    # 配置文件
└── utils/                     # 工具类
```

### 前端架构（Frontend）

Vue3 + TypeScript + Element Plus：

```
frontend/src/
├── api/              # API 接口定义
├── components/       # 公共组件
├── views/            # 页面组件
├── store/            # Pinia 状态管理
├── router/           # 路由配置
├── utils/             # 工具函数
└── layouts/          # 布局组件
```

### 移动端架构（Fastapp）

uni-app + Vue3 + TypeScript：

```
fastapp/src/
├── pages/            # 页面组件
├── components/       # 公共组件
├── api/              # API 接口
├── store/            # Pinia 状态管理
└── composables/      # 组合式函数
```

## 关键原则

1. **后端模块化**: 每个业务模块独立，包含完整的 MVC 层级
2. **前端组件化**: 可复用的组件优先
3. **类型安全**: 全面使用 TypeScript 和 Pydantic
4. **中文注释**: 所有代码必须包含详细的中文注释
5. **异步优先**: 后端全面使用 async/await 模式